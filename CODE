# Load libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(caret)
library(nnet) 
library(e1071)
library(rpart)
library(rpart.plot)

# Create a sample dataset similar to your registration data
set.seed(123)  # For reproducibility

data <- data.frame(
  APPLICATION_ID = paste0("APP", sprintf("%05d", sample(1:99999, 9000, replace = TRUE))),
  ORG_ABN = sample(1e11:1e12, 9000, replace = TRUE),
  NUM_STAFF = sample(1:100, 9000, replace = TRUE),
  NUM_KP = sample(1:30, 9000, replace = TRUE),
  MANAGEMENT = sample(c("P", "A", "S"), 9000, replace = TRUE),
  NUM_PAR = sample(1:100, 9000, replace = TRUE),
  NUM_CLAIMS = sample(0:5000, 9000, replace = TRUE),
  TOTAL_CLAIM_AMT = round(runif(9000, 0, 2e6), 2),
  
  # SUM variables (flag quantities)
  SIL_SUM = sample(0:1000, 9000, replace = TRUE),
  SC123_SUM = sample(0:1000, 9000, replace = TRUE),
  PM_SUM = sample(0:1000, 9000, replace = TRUE),
  R102_SUM = sample(0:1500, 9000, replace = TRUE),
  R104_SUM = sample(0:1500, 9000, replace = TRUE),
  R107_SUM = sample(0:1500, 9000, replace = TRUE),
  R110_SUM = sample(0:1500, 9000, replace = TRUE),
  R115_SUM = sample(0:1500, 9000, replace = TRUE),
  R117_SUM = sample(0:1500, 9000, replace = TRUE),
  R118_SUM = sample(0:1500, 9000, replace = TRUE),
  R125_SUM = sample(0:1500, 9000, replace = TRUE),
  R131_SUM = sample(0:1500, 9000, replace = TRUE),
  R132_SUM = sample(0:1500, 9000, replace = TRUE),
  R133_SUM = sample(0:1500, 9000, replace = TRUE),
  R136_SUM = sample(0:1500, 9000, replace = TRUE),
  
  # Binary indicator flags
  SIL_FLAG = sample(0:1, 9000, replace = TRUE),
  SC123_FLAG = sample(0:1, 9000, replace = TRUE),
  PM_FLAG = sample(0:1, 9000, replace = TRUE),
  R102_FLAG = sample(0:1, 9000, replace = TRUE),
  R104_FLAG = sample(0:1, 9000, replace = TRUE),
  R107_FLAG = sample(0:1, 9000, replace = TRUE),
  R110_FLAG = sample(0:1, 9000, replace = TRUE),
  R115_FLAG = sample(0:1, 9000, replace = TRUE),
  R117_FLAG = sample(0:1, 9000, replace = TRUE),
  R118_FLAG = sample(0:1, 9000, replace = TRUE),
  R125_FLAG = sample(0:1, 9000, replace = TRUE),
  R131_FLAG = sample(0:1, 9000, replace = TRUE),
  R132_FLAG = sample(0:1, 9000, replace = TRUE),
  R133_FLAG = sample(0:1, 9000, replace = TRUE),
  R136_FLAG = sample(0:1, 9000, replace = TRUE),
  
  # Duration in days (target variable)
  DURATION = sample(100:1200, 9000, replace = TRUE)
)

plot_violin <- function(data, cols) {
  for (col in cols) {
    p <- ggplot(data, aes_string(x = col, y = "DURATION")) +
      geom_violin(fill = "skyblue", color = "black") +
      labs(title = paste("Violin Plot: Duration by", col), y = "Duration", x = col)
    print(p)
  }
}

plot_box <- function(data, cols) {
  for (col in cols) {
    p <- ggplot(data, aes_string(x = col, y = "DURATION")) +
      geom_boxplot(fill = "lightgreen") +
      labs(title = paste("Boxplot: Duration by", col), y = "Duration", x = col)
    print(p)
  }
}

plot_scatter <- function(data, cols) {
  for (col in cols) {
    p <- ggplot(data, aes_string(x = col, y = "DURATION")) +
      geom_point(alpha = 0.4, color = "steelblue") +
      labs(title = paste("Scatterplot: Duration vs", col), y = "Duration", x = col)
    print(p)
  }
}

plot_density <- function(data, cols) {
  for (col in cols) {
    p <- ggplot(data, aes_string(x = col)) +
      geom_density(fill = "orange", alpha = 0.6) +
      labs(title = paste("Density Plot:", col), x = col, y = "Density")
    print(p)
  }
  

}

edited_data <- data %>%
  # Duration Categories
  mutate(
    DURATION_CAT = case_when(
      DURATION < 180 ~ "<6 months",
      DURATION >= 180 & DURATION < 365 ~ "6–12 months",
      DURATION >= 365 & DURATION < 545 ~ "12–18 months",
      DURATION >= 545 & DURATION < 730 ~ "18–24 months",
      TRUE ~ "24+ months"
    ),
    
    DURATION_BI = ifelse(DURATION >= 465, "Long", "Short"),
    
    # Staff Categories
    STAFF_CAT = case_when(
      NUM_STAFF == 1 ~ "1 staff",
      NUM_STAFF >= 2 & NUM_STAFF < 10 ~ "2-10 staff",
      NUM_STAFF >= 10 & NUM_STAFF < 50 ~ "10-50 staff",
      TRUE ~ "50+ staff"
    ),
    
    # Key Personnel Categories
    KP_CAT = case_when(
      NUM_KP == 1 ~ "1 KP",
      NUM_KP >= 2 & NUM_KP < 10 ~ "2-10 KP",
      NUM_KP >= 10 & NUM_KP < 20 ~ "10-20 KP",
      TRUE ~ "20+ KP"
    ),
    
    # Participant Categories
    PAR_CAT = case_when(
      NUM_PAR <= 5 ~ "1–5 participants",
      NUM_PAR <= 20 ~ "6–20 participants",
      NUM_PAR <= 50 ~ "21–50 participants",
      TRUE ~ "50+ participants"
    ),
    
    # Claims Categories
    CLAIM_CAT = case_when(
      NUM_CLAIMS == 0 ~ "0 claims",
      NUM_CLAIMS <= 20 ~ "1–20 claims",
      NUM_CLAIMS <= 100 ~ "21–100 claims",
      TRUE ~ "100+ claims"
    ),
    
    # Total Claim Amount Categories
    CLAIM_AMT_CAT = case_when(
      TOTAL_CLAIM_AMT <= 0 ~ "No claim",
      TOTAL_CLAIM_AMT <= 10000 ~ "<10k",
      TOTAL_CLAIM_AMT <= 100000 ~ "10k–100k",
      TOTAL_CLAIM_AMT <= 1000000 ~ "100k–1M",
      TRUE ~ "1M+"
    ),
    
    # Total Sum of Flags (continuous)
    TOTAL_FLAGS = SIL_SUM + SC123_SUM + PM_SUM +
      R102_SUM + R104_SUM + R107_SUM + R110_SUM +
      R115_SUM + R117_SUM + R118_SUM + R125_SUM +
      R131_SUM + R132_SUM + R133_SUM + R136_SUM,
    
    # Total Distinct Flags (binary count)
    DISTINCT_FLAGS = SIL_FLAG + SC123_FLAG + PM_FLAG +
      R102_FLAG + R104_FLAG + R107_FLAG + R110_FLAG +
      R115_FLAG + R117_FLAG + R118_FLAG + R125_FLAG +
      R131_FLAG + R132_FLAG + R133_FLAG + R136_FLAG
  )

# Convert to factors
edited_data <- edited_data %>%
  mutate(
    DURATION_CAT = as.factor(DURATION_CAT),
    DURATION_BI = as.factor(DURATION_BI),
    STAFF_CAT = as.factor(STAFF_CAT),  
    MANAGEMENT = as.factor(MANAGEMENT),
    KP_CAT = as.factor(KP_CAT),
    PAR_CAT = as.factor(PAR_CAT),
    CLAIM_CAT = as.factor(CLAIM_CAT),
    CLAIM_AMT_CAT = as.factor(CLAIM_AMT_CAT)
    
  )

num_columns <- c(
  "NUM_STAFF",
  "NUM_KP",
  "NUM_PAR",
  "NUM_CLAIMS",
  "TOTAL_CLAIM_AMT",
  "TOTAL_FLAGS",
  "DISTINCT_FLAGS"
)

cat_columns <- c(
  "NUM_STAFF",
  "NUM_KP",
  "NUM_PAR",
  "NUM_CLAIMS",
  "TOTAL_CLAIM_AMT",
  "TOTAL_FLAGS",
  "DISTINCT_FLAGS"
)

# plot_scatter(edited_data, num_columns)

# Use key numeric predictors and encoded factors
model_data <- edited_data %>%
  select(DURATION, NUM_KP, NUM_PAR, NUM_CLAIMS, TOTAL_CLAIM_AMT,
         TOTAL_FLAGS, DISTINCT_FLAGS, MANAGEMENT)

train_index <- createDataPartition(model_data$DURATION, p = 0.8, list = FALSE)
train_data <- model_data[train_index, ]
test_data <- model_data[-train_index, ]

# One-hot encode and normalize numeric variables
pre_proc <- preProcess(train_data, method = c("center", "scale"))

train_processed <- predict(pre_proc, train_data)
test_processed <- predict(pre_proc, test_data)

lm_model <- lm(DURATION ~ ., data = train_processed)
summary(lm_model)

# MULTI LOGISTIC REGRESSION
# Filter out any missing duration categories (optional)
model_data <- sample_data %>%
  filter(!is.na(DURATION_CAT)) %>%
  select(DURATION_CAT, NUM_KP, NUM_PAR, NUM_CLAIMS, TOTAL_CLAIM_AMT,
         TOTAL_SUM_FLAGS, DISTINCT_FLAGS, MANAGEMENT)

train_index <- createDataPartition(model_data$DURATION_CAT, p = 0.8, list = FALSE)
train_data <- model_data[train_index, ]
test_data <- model_data[-train_index, ]

# Preprocess: scale numeric and one-hot encode categorical
pre_proc <- preProcess(train_data, method = c("center", "scale"))
train_processed <- predict(pre_proc, train_data)
test_processed <- predict(pre_proc, test_data)

multi_model <- multinom(DURATION_CAT ~ ., data = train_processed)
summary(multi_model)

# Predict on test set
pred_class <- predict(multi_model, newdata = test_processed)

# Confusion matrix
confusionMatrix(pred_class, test_processed$DURATION_CAT)


# DECISION TREES REGRESSION
train_index <- createDataPartition(edited_data$DURATION, p = 0.8, list = FALSE)
train_reg <- edited_data[train_index, ]
test_reg <- edited_data[-train_index, ]

# Fit regression tree
tree_reg <- rpart(DURATION ~ NUM_KP + NUM_PAR + TOTAL_CLAIM_AMT + TOTAL_FLAGS +
                    DISTINCT_FLAGS + NUM_CLAIMS + MANAGEMENT, data = train_reg, method = "anova")

# Plot tree
rpart.plot(tree_reg, main = "Regression Tree: Predicting Duration")

# Predict and evaluate
preds_reg <- predict(tree_reg, test_reg)
rmse <- sqrt(mean((preds_reg - test_reg$DURATION)^2))
cat("RMSE:", round(rmse, 2), "\n")


# DECISION TREES CLASSIFICATION
train_index <- createDataPartition(edited_data$DURATION_CAT, p = 0.8, list = FALSE)
train_class <- edited_data[train_index, ]
test_class <- edited_data[-train_index, ]

# Fit classification tree
tree_class <- rpart(DURATION_CAT ~ NUM_KP + NUM_PAR + TOTAL_CLAIM_AMT + TOTAL_FLAGS +
                      DISTINCT_FLAGS + NUM_CLAIMS + MANAGEMENT, data = train_class, method = "class")

# Plot tree
rpart.plot(tree_class, main = "Classification Tree: Duration Category",
           box.palette = "Blues")

# Predict and evaluate
preds_class <- predict(tree_class, test_class, type = "class")
confusionMatrix(preds_class, test_class$DURATION_CAT)

# LOGISTIC REGRESSION

train_index <- createDataPartition(edited_data$DURATION_BI, p = 0.8, list = FALSE)
train_bin <- edited_data[train_index, ]
test_bin <- edited_data[-train_index, ]

# Select features and target
model_data <- train_bin %>%
  select(DURATION_BI, NUM_KP, NUM_PAR, NUM_CLAIMS, TOTAL_CLAIM_AMT,
         TOTAL_FLAGS, DISTINCT_FLAGS, MANAGEMENT)

# Standardize and encode
pre_proc <- preProcess(model_data, method = c("center", "scale"))
train_proc <- predict(pre_proc, model_data)

# Do the same for test set
test_proc <- predict(pre_proc, test_bin %>%
                       select(DURATION_BI, NUM_KP, NUM_PAR, NUM_CLAIMS,
                              TOTAL_CLAIM_AMT, TOTAL_FLAGS, DISTINCT_FLAGS, MANAGEMENT))

logit_model <- glm(DURATION_BI ~ ., data = train_proc, family = "binomial")
summary(logit_model)

# Predict probabilities and convert to class
pred_probs <- predict(logit_model, newdata = test_proc, type = "response")
pred_class <- ifelse(pred_probs > 0.5, "Long", "Short")
pred_class <- factor(pred_class, levels = levels(test_proc$DURATION_BI))

# Confusion matrix
confusionMatrix(pred_class, test_proc$DURATION_BI)

